{"ast":null,"code":"var _jsxFileName = \"/Users/aungzay/Downloads/TuringReact3rdBatch-master 3/react-redux-typescript/src/pages/SendMessage.tsx\",\n    _s = $RefreshSig$();\n\nimport { Form, Formik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\";\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport { selectUserById } from \"../features/Login/UsersSlice\";\nimport { apiGetAllMessage, apiSaveMessage, selectMessage } from \"../message/messageSlice\";\nimport * as Yup from 'yup';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Messagechema = Yup.object().shape({\n  title: Yup.string().min(2, 'Too Short!').max(50, 'Too Long!').required('Required'),\n  year: Yup.number().required('Required')\n});\n\nconst MessageForm = props => {\n  _s();\n\n  let dispatch = useAppDispatch();\n  let message = props.message;\n  console.log('Edit movie ', message);\n  let handleClose = props.handleClose;\n  let initValues = {\n    _id: message ? message._id : '',\n    username: message ? message.username : '',\n    FoodName: message ? message.FoodName : '',\n    count: message ? message.count : '',\n    cost: message ? message.cost : '',\n    date: message ? message.date : \"\",\n    Message: message ? message.Message : ''\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initValues,\n      validationSchema: Messagechema,\n      onSubmit: values => {\n        // same shape as initial values\n        //console.log(\"Handle Close \", handleClose);\n        console.log(values);\n\n        if (!message) //save\n          {\n            let newMessage = {\n              username: values.username,\n              FoodName: values.FoodName,\n              count: values.count,\n              cost: values.cost,\n              date: values.date,\n              Message: values.Message\n            };\n            console.log('Movie ', newMessage);\n            dispatch(apiSaveMessage(newMessage));\n          } else //Update movie\n          {\n            let messageToUpdate = {\n              _id: values._id,\n              username: values.username,\n              FoodName: values.FoodName,\n              count: values.count,\n              cost: values.cost,\n              date: values.date,\n              Message: values.Message\n            };\n          }\n\n        handleClose();\n      },\n      children: _ref => {\n        let {\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting\n        } = _ref;\n        return /*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Title\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            id: \"title\",\n            name: \"title\",\n            onChange: handleChange,\n            onBlur: handleBlur,\n            value: values.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 21\n          }, this), errors.username && touched.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger\",\n            children: errors.username.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 92,\n            columnNumber: 25\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Year\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            className: \"form-control\",\n            id: \"year\",\n            name: \"year\",\n            onChange: handleChange,\n            onBlur: handleBlur,\n            value: values.username\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 21\n          }, this), errors.username && touched.username ? /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"alert alert-danger\",\n            children: errors.username.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 60\n          }, this) : null, /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"submit\",\n            className: \"btn btn-primary\",\n            children: message ? 'Update' : 'Save'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 105,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            type: \"button\",\n            onClick: () => handleClose(),\n            className: \"btn\",\n            children: \"Cancel\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 17\n        }, this);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 13\n  }, this);\n};\n\n_s(MessageForm, \"BJQ1DUn/XFEl2NsQ3DWyHAXfnkY=\", false, function () {\n  return [useAppDispatch];\n});\n\n_c = MessageForm;\nexport default function () {\n  useEffect(() => {\n    dispatch(apiGetAllMessage());\n  }, []);\n  const messages = useAppSelector(selectMessage);\n  let {\n    ID_\n  } = useParams();\n  let user = useAppSelector(state => selectUserById(state, ID_));\n  const dispatch = useAppDispatch();\n  console.log(user);\n\n  for (let i = 0; i < messages.length; i++) {\n    console.log(\"message is\", messages[i]);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: user.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 14\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 9\n  }, this);\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"MessageForm\");","map":{"version":3,"names":["Form","Formik","React","useEffect","useParams","useAppDispatch","useAppSelector","selectUserById","apiGetAllMessage","apiSaveMessage","selectMessage","Yup","Messagechema","object","shape","title","string","min","max","required","year","number","MessageForm","props","dispatch","message","console","log","handleClose","initValues","_id","username","FoodName","count","cost","date","Message","values","newMessage","messageToUpdate","errors","touched","handleChange","handleBlur","handleSubmit","isSubmitting","toString","messages","ID_","user","state","i","length"],"sources":["/Users/aungzay/Downloads/TuringReact3rdBatch-master 3/react-redux-typescript/src/pages/SendMessage.tsx"],"sourcesContent":["import { Form, Formik } from \"formik\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router\"\nimport { useAppDispatch, useAppSelector } from \"../app/hooks\";\nimport UsersSlice, { selectUserById, Users } from \"../features/Login/UsersSlice\";\nimport { apiGetAllMessage, apiSaveMessage, Message_, selectMessage } from \"../message/messageSlice\";\nimport * as Yup from 'yup';\n\nconst Messagechema = Yup.object().shape({\n    title: Yup.string()\n        .min(2, 'Too Short!')\n        .max(50, 'Too Long!')\n        .required('Required'),\n\n    year: Yup.number().required('Required'),\n});\nconst MessageForm = (props:any)=>{\n    let dispatch = useAppDispatch();\n    let message = props.message;\n    console.log('Edit movie ',message);\n    let handleClose = props.handleClose;\n    let initValues ={\n        _id : message? message._id:'',\n        username:  message? message.username:'',\n        FoodName:  message? message.FoodName:'',\n        count: message? message.count:'',\n        cost:message? message.cost:'',\n        date:message? message.date:\"\",\n        Message:message? message.Message:''\n    }\n    return (<div>\n        \n        <Formik\n            initialValues={initValues}\n            validationSchema={Messagechema}\n            onSubmit={values => {\n                // same shape as initial values\n                //console.log(\"Handle Close \", handleClose);\n                console.log(values);\n\n                if (!message)//save\n                {\n                    let newMessage: Message_ = {\n                        username:values.username,\n                        FoodName:values.FoodName,\n                        count:values.count,\n                        cost:values.cost,\n                        date:values.date,\n                        Message:values.Message\n                    }\n\n                    console.log('Movie ', newMessage);\n                    dispatch(apiSaveMessage(newMessage));\n                }\n                else //Update movie\n                {\n                    let messageToUpdate: Message_ = {\n                        _id : values._id,\n                        username:values.username,\n                        FoodName:values.FoodName,\n                        count:values.count,\n                        cost:values.cost,\n                        date:values.date,\n                        Message:values.Message\n                    }\n\n                }\n\n                handleClose();\n            }}\n        >\n            {({\n                  values,\n                  errors,\n                  touched,\n                  handleChange,\n                  handleBlur,\n                  handleSubmit,\n                  isSubmitting\n              }) => (\n                <Form>\n                    <label>Title</label>\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           id=\"title\"\n                           name=\"title\"\n                           onChange={handleChange}\n                           onBlur={handleBlur}\n                           value={values.username}\n                    />\n                    {errors.username && touched.username ? (\n                        <div className=\"alert alert-danger\">{errors.username.toString()}</div>\n                    ) : null}\n\n                    <label>Year</label>\n                    <input type=\"text\"\n                           className=\"form-control\"\n                           id=\"year\"\n                           name=\"year\"\n                           onChange={handleChange}\n                           onBlur={handleBlur}\n                           value={values.username}\n                    />\n                    {errors.username && touched.username ? <div className=\"alert alert-danger\">{errors.username.toString()}</div> : null}\n                    <button type=\"submit\"\n                            className=\"btn btn-primary\">{message?'Update':'Save'}\n                    </button>\n                    <button type=\"button\"\n                            onClick={()=>handleClose()}\n                            className=\"btn\">Cancel\n                    </button>\n                </Form>\n            )}\n        </Formik>\n\n    </div>);\n};\nexport default function(){\n    useEffect(()=>{\n        dispatch(apiGetAllMessage());\n    },[]);\n    const messages = useAppSelector(selectMessage);\n    let {ID_} = useParams()\n    let user:Users = useAppSelector(state=>selectUserById(state,ID_!));\n    const dispatch = useAppDispatch();\n    console.log(user)\n    for(let i = 0;i<messages.length;i++){\n        console.log(\"message is\",messages[i])\n    }\n    return(\n        <div><h3>{user.username}</h3></div>\n        \n    )\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}